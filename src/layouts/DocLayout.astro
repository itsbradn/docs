---
import "../styles/docs.scss";
import "../styles/main.scss";
import { SEO } from "astro-seo";
import "@fontsource/poppins/400.css";
import "@fontsource/poppins/600.css";
import "@fontsource/poppins/700.css";
import ArrowRightIcon from "../components/icons/ArrowRightIcon.astro";
import { getCollection, type CollectionEntry } from "astro:content";

interface ContentTitle {
  type: "title";
  value: string;
}

interface ContentLink {
  type: "link";
  value: string;
  toSlug?: string;
}

interface ContentDrop {
  type: "drop";
  value: string;
  children: ContentItem[];
}

type ContentItem = ContentTitle | ContentLink | ContentDrop;

interface Page {
  slug: string | undefined;
  contents: ContentItem[];
}

const contents: ContentItem[] = [];

const parseSlug = (slug: string) => {
  const newSlug = slug === "index" ? "/" : slug;
  return newSlug.startsWith("/") ? newSlug : "/" + newSlug;
};

const docs = (await getCollection("docs")).sort(
  (a, b) => (a.data.order ?? 9999) - (b.data.order ?? 9999)
);
let madeGroups: string[] = [];
docs.forEach((v) => {
  if (v.data.group) {
    if (madeGroups.includes(v.data.group.toLowerCase())) return;
    contents.push({
      type: "drop",
      value: v.data.group,
      children: docs
        .filter(
          (x) => x.data.group?.toLowerCase() === v.data.group?.toLowerCase()
        )
        .map((v) => ({
          type: "link",
          value: v.data.title,
          toSlug: parseSlug(v.slug),
        })),
    });
    madeGroups.push(v.data.group.toLowerCase());
    return;
  }
  contents.push({
    type: "link",
    toSlug: parseSlug(v.slug),
    value: v.data.title,
  });
});

const pages: Page[] = [
  {
    slug: undefined,
    contents: [
      {
        type: "title",
        value: "Overview",
      },
      {
        type: "link",
        toSlug: undefined,
        value: "Overview",
      },
      {
        type: "drop",
        value: "Overview 2",
        children: [
          {
            type: "link",
            toSlug: "2",
            value: "Overview",
          },
          {
            type: "link",
            toSlug: "4",
            value: "Overview",
          },
          {
            type: "drop",
            value: "Overview 2",
            children: [
              {
                type: "link",
                toSlug: "2",
                value: "Overview",
              },
              {
                type: "link",
                toSlug: "4",
                value: "Overview",
              },
            ],
          },
        ],
      },
      {
        type: "link",
        toSlug: "3",
        value: "Overview 3",
      },
    ],
  },
];

type Props = CollectionEntry<"docs">["data"] & { slug: string };

const { title, description } = Astro.props;
const page = pages[0];
// const { slug } = Astro.params;
// const page = pages.find((page) => page.slug === slug);
// if (!page) return Astro.redirect("/404");
---

<script>
  const sleep = (ms: number) =>
    new Promise((resolve) => setTimeout(resolve, ms));

  const parsePath = (path: string) => {
    return path.endsWith("/") ? path.slice(0, path.length - 1) : path;
  };

  let path = parsePath(window.location.pathname);
  const linkEls = document.querySelectorAll(".contents__link");
  linkEls.forEach((v) => {
    const elPath = parsePath(v.getAttribute("href") ?? "group");
    if (elPath === path) v.classList.add("active");
  });

  const els = document.getElementsByClassName("contents__drop");

  for (let el of els) {
    el = el as HTMLElement;

    const elButton: HTMLElement | null = el.querySelector("button");
    if (!elButton) continue;
    const dropContainer: HTMLElement | null =
      el.querySelector(".drop__container");
    if (!dropContainer) continue;
    const dropContent: HTMLElement | null =
      dropContainer.querySelector(".drop__content");
    if (!dropContent) continue;

    const height = dropContent.getBoundingClientRect().height;

    elButton.addEventListener("click", async () => {
      if (el.classList.contains("open")) {
        dropContainer.style.height = height + "px";
        await sleep(1);
        dropContainer.style.height = "0px";
        el.classList.remove("open");
        return;
      }
      el.classList.add("open");
      dropContainer.style.height = height + "px";
      await sleep(75);
      dropContainer.style.height = "auto";
    });
  }
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" />
    <title>{title + " | braden docs ðŸŒ¸"}</title>
    <SEO
      title={title + " | braden docs ðŸŒ¸"}
      description={description}
      charset="utf-8"
      openGraph={{
        basic: {
          title: (title as string) + " | braden docs ðŸŒ¸",
          type: "website",
          image: "/favicon.svg",
        },
      }}
      twitter={{
        title: title + " | braden docs ðŸŒ¸",
        description,
      }}
      ,
      extend={{
        meta: [{ name: "theme-color", content: "#FC5C7D" }],
      }}
    />
  </head>
  <body>
    <header class="header">
      <a href="/" class="header__logo"><h1>bradn</h1></a>
    </header>

    <main class="no-marg doc-table">
      <aside class="contents-table">
        <nav>
          {
            contents.map((v) => {
              function renderData(data: ContentItem) {
                switch (data.type) {
                  case "title": {
                    return <span class="contents__title">{data.value}</span>;
                  }
                  case "link": {
                    return (
                      <a
                        class="contents__link"
                        href={data.toSlug === undefined ? "" : data.toSlug}
                      >
                        {data.value}
                      </a>
                    );
                  }
                  case "drop": {
                    return (
                      <div class="contents__drop">
                        <button class="contents__link icon">
                          <ArrowRightIcon /> <span>{data.value}</span>
                        </button>
                        <div class="drop__container">
                          <div class="drop__content">
                            {data.children.map((v) => renderData(v))}
                          </div>
                        </div>
                      </div>
                    );
                  }
                  default: {
                    return;
                  }
                }
              }

              return renderData(v);
            })
          }
        </nav>
      </aside>
      <div class="content">
        <slot />
      </div>
      <aside class="page-contents"></aside>
    </main>
  </body>
</html>
